# ToDo: Refactor this 'extends: sqlite' nonsense out into yaml merging using &.
version: "2.3"

x-base: &base
  build:
    context: .
    args:
    - PYTHON_VERSION=${PYTHON_VERSION}
  volumes:
  - ${DJANGO_PATH}:/tests/django/
  - ./settings:/tests/django/tests/settings
  - ./extra-requirements:/tests/django/tests/requirements/extra/
  - ./entrypoint.sh:/entrypoint.sh
  - ${PIP_CACHE_VOLUME}:/root/.cache/pip/
  # Using yaml merging here overwrites the arrays. Simpler to just mount this in every service.
  - ./oracle:/oracle
  entrypoint: /entrypoint.sh python tests/runtests.py

services:
  sqlite:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_sqlite
    depends_on:
      memcached:
        condition: service_healthy
      memcached2:
        condition: service_healthy

  sqlite-gis:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_sqlite_gis
    - EXTRA_PACKAGES=libsqlite3-mod-spatialite binutils libproj-dev gdal-bin libgeoip1 python-gdal

  postgres:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_postgres
    - EXTRA_REQUIREMENTS=postgres.txt
    depends_on:
      postgres-db:
        condition: service_healthy
  postgres-db: &postgres-base
    image: postgres:${POSTGRES_VERSION}
    environment:
    - POSTGRES_USER=django
    - POSTGRES_PASSWORD=django
    - POSTGRES_DB=django
    volumes:
      - postgres:/var/lib/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "django"]
      interval: 1s
      timeout: 3s
      retries: 30

  postgres-gis:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_postgres_gis
    - EXTRA_REQUIREMENTS=postgres.txt
    depends_on:
      postgres-db-gis:
        condition: service_healthy
  postgres-db-gis:
    <<: *postgres-base
    image: "postgres-postgis"
    build:
      dockerfile: Dockerfile-postgis
      context: .
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
    - postgres-gis:/var/lib/postgresql

  mysql:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_mysql
    - EXTRA_REQUIREMENTS=mysql.txt
    - EXTRA_PACKAGES=mysql-client
    depends_on:
    - mysql-db
  mysql-db:
    image: mysql:${MYSQL_VERSION}
    entrypoint: ['/entrypoint.sh', '--default-authentication-plugin=mysql_native_password']
    volumes:
      - mysql:/var/lib/mysql
    environment:
    - MYSQL_USER=django
    - MYSQL_PASSWORD=django
    - MYSQL_DATABASE=django
    - MYSQL_ALLOW_EMPTY_PASSWORD=1

  mariadb:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_mariadb
    - EXTRA_REQUIREMENTS=mysql.txt
    - EXTRA_PACKAGES=mysql-client
    depends_on:
    - mariadb-db
  mariadb-db:
    image: mariadb:${MARIADB_VERSION}
    volumes:
    - mariadb:/var/lib/mysql
    environment:
    - MYSQL_USER=django
    - MYSQL_PASSWORD=django
    - MYSQL_DATABASE=django
    - MYSQL_ALLOW_EMPTY_PASSWORD=1

  oracle:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_oracle
    - EXTRA_REQUIREMENTS=oracle.txt
    - EXTRA_PACKAGES=unzip libaio1
    - IS_ORACLE=1
    depends_on:
      oracle-db:
        condition: service_healthy
  oracle-db:
    image: sath89/oracle-12c
    volumes:
      - oracle:/u01/app/oracle/
    environment:
      - WEB_CONSOLE=false
    healthcheck:
      test: echo "select * from v\xe;" | sqlplus -S sys/oracle as sysdba || exit 1
      timeout: 3s
      interval: 30s
      retries: 30

  # There are issues running the tests with 1 memcached server in parallel.
  # For now use two.
  memcached:
    image: memcached:1.5-alpine
    healthcheck:
      test: /usr/bin/nc -z 127.0.0.1 11211 || exit 1
      timeout: 1s
      interval: 30s
      retries: 10

  memcached2:
    image: memcached:1.5-alpine
    healthcheck:
      test: /usr/bin/nc -z 127.0.0.1 11211 || exit 1
      timeout: 1s
      interval: 30s
      retries: 10

  docs:
    <<: *base
    environment:
      - EXTRA_REQUIREMENTS=extra/docs.txt
      - EXTRA_PACKAGES=libenchant1c2a
    entrypoint: /entrypoint.sh
    command: bash -c "cd docs && make spelling"
    user: root

  flake8:
    <<: *base
    environment:
    - EXTRA_REQUIREMENTS=extra/linting.txt
    entrypoint: /entrypoint.sh flake8

volumes:
  pip-cache:
  oracle:
  mysql:
  mariadb:
  postgres:
  postgres-gis:
