version: "2.3"

x-base: &base
  image: tomforbes/django-docker-box:${PYTHON_VERSION}
  build:
    context: ${DJANGO_PATH}
    dockerfile: ${PWD}/Dockerfile
    args:
    - PYTHON_VERSION=${PYTHON_VERSION}
  volumes:
  - ${DJANGO_PATH}:/tests/django/
  - ./settings:/tests/django/tests/settings
  - ./oracle_entrypoint.sh:/oracle_entrypoint.sh
  # Using yaml merging here overwrites the arrays. Simpler to just mount this in every service.
  - ./oracle:/oracle
  entrypoint: python tests/runtests.py

x-postgres-base: &postgres-base
  environment:
  - POSTGRES_USER=django
  - POSTGRES_PASSWORD=django
  - POSTGRES_DB=django
  # Set a few options to speed up postgresql tests.
  command: -c fsync=off -c synchronous_commit=off -c full_page_writes=off
  tmpfs:
    - /var/lib/postgresql
  healthcheck:
    test: ["CMD", "pg_isready", "-U", "django"]
    interval: 1s
    timeout: 3s
    retries: 30
    start_period: 4s

services:
  sqlite:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_sqlite
    depends_on:
      memcached:
        condition: service_healthy
      memcached2:
        condition: service_healthy

  sqlite-gis:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_sqlite_gis

  postgres:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_postgres
    depends_on:
      postgres-db:
        condition: service_healthy
  postgres-db:
    <<: *postgres-base
    image: postgres:${POSTGRES_VERSION}

  postgres-gis:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_postgres_gis
    depends_on:
      postgres-gis-db:
        condition: service_healthy
  postgres-gis-db:
    <<: *postgres-base
    image: tomforbes/django-docker-box:postgres-gis-${POSTGRES_VERSION}-${POSTGIS_VERSION}
    build:
      dockerfile: Dockerfile-postgis
      context: .
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
        - POSTGIS_VERSION=${POSTGIS_VERSION}

  mysql:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_mysql
    depends_on:
      mysql-db:
        condition: service_healthy
  mysql-db: &mysql_base
    image: mysql:${MYSQL_VERSION}
    entrypoint: ['/entrypoint.sh', '--default-authentication-plugin=mysql_native_password']
    tmpfs:
      - /var/lib/mysql
    environment:
    - MYSQL_USER=django
    - MYSQL_PASSWORD=django
    - MYSQL_DATABASE=django
    - MYSQL_ALLOW_EMPTY_PASSWORD=1
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 4s

  mysql-gis:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_mysql_gis
    depends_on:
      mysql-gis-db:
        condition: service_healthy
  mysql-gis-db:
    <<: *mysql_base
    volumes:
    - /var/lib/mysql

  mariadb:
    <<: *base
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_mariadb
    depends_on:
      mariadb-db:
        condition: service_healthy
  mariadb-db:
    image: mariadb:${MARIADB_VERSION}
    tmpfs:
    - /var/lib/mysql
    environment:
    - MYSQL_USER=django
    - MYSQL_PASSWORD=django
    - MYSQL_DATABASE=django
    - MYSQL_ALLOW_EMPTY_PASSWORD=1
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  oracle:
    <<: *base
    image: tomforbes/django-docker-box:oracle-${PYTHON_VERSION}
    environment:
    - DJANGO_SETTINGS_MODULE=settings.test_oracle
    entrypoint: /oracle_entrypoint.sh python tests/runtests.py
    depends_on:
      oracle-db:
        condition: service_healthy
  oracle-db:
    image: sath89/oracle-12c
    volumes:
      - oracle:/u01/app/oracle/
    environment:
      - WEB_CONSOLE=false
    healthcheck:
      test: echo "select * from v\xe;" | sqlplus -S sys/oracle as sysdba || exit 1
      timeout: 3s
      interval: 30s
      retries: 30

  memcached: &memcached
    image: memcached:1.5-alpine
    healthcheck:
      test: /usr/bin/nc -z 127.0.0.1 11211 || exit 1
      timeout: 1s
      interval: 30s
      retries: 10

  memcached2:
    <<: *memcached

  docs:
    <<: *base
    command: make spelling
    working_dir: ./docs
    user: root

  flake8:
    <<: *base
    command: flake8

volumes:
  oracle:
  pip-cache:
